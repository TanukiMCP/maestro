# Copyright (c) 2025 TanukiMCP Orchestra
# Licensed under Non-Commercial License - Commercial use requires approval from TanukiMCP
# Contact tanukimcp@gmail.com for commercial licensing inquiries

"""
Scientific Visualization Engine

This engine generates production-quality Python code for creating scientific
visualizations using the 'matplotlib' and 'seaborn' libraries. Instead of
performing a calculation, it provides a complete, executable script to
render and save a specified plot. This allows for maximum flexibility and
integration with other tools. All functions are fully implemented.
"""

import logging
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

class ScientificVisualizationEngine:
    """
    Implements code generation for standard scientific plots.
    """
    
    def __init__(self):
        self.name = "Scientific Visualization Engine"
        self.version = "1.0.0"
        self.supported_calculations = [
            "generate_line_plot",
            "generate_scatter_plot",
            "generate_histogram",
            "generate_heatmap"
        ]

    def _generate_plot_code(self, imports: str, plot_code: str, data_preparation: str, options: Dict[str, Any]) -> Dict[str, str]:
        """Helper to assemble the final Python script."""
        
        title = options.get('title', 'Scientific Plot')
        xlabel = options.get('xlabel', 'X-axis')
        ylabel = options.get('ylabel', 'Y-axis')
        output_filename = options.get('output_filename', 'plot.png')
        
        code = f"""# Auto-generated by Scientific Visualization Engine
# Ensure you have matplotlib and seaborn installed: pip install matplotlib seaborn
import matplotlib.pyplot as plt
import numpy as np
{imports}

try:
    # --- Data Preparation ---
{data_preparation}

    # --- Plotting ---
    plt.figure(figsize=({options.get('figure_width', 10)}, {options.get('figure_height', 6)}))
{plot_code}
    plt.title('{title}')
    plt.xlabel('{xlabel}')
    plt.ylabel('{ylabel}')
    if {options.get('grid', True)}:
        plt.grid(True)
    
    # --- Save and Show ---
    plt.savefig('{output_filename}')
    plt.show()
    
    print(f"✅ Plot successfully saved to '{output_filename}'")

except Exception as e:
    print(f"❌ An error occurred: {{e}}")

"""
        return {"plot_code": code, "output_filename": output_filename}

    def generate_line_plot(self, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Generates Python code for a line plot."""
        try:
            data_preparation = f"""    x_data = np.array({parameters['x_data']})
    y_data = np.array({parameters['y_data']})"""

            plot_code = f"""    plt.plot(x_data, y_data, marker='{parameters.get('marker', 'o')}', linestyle='{parameters.get('linestyle', '-')}', label='{parameters.get('label', 'Data')}')
    if {parameters.get('label') is not None}:
        plt.legend()"""
            
            return self._generate_plot_code("", plot_code, data_preparation, parameters)
        except KeyError as e:
            return {"error": f"Missing required parameter for line plot: {e}"}

    def generate_scatter_plot(self, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Generates Python code for a scatter plot."""
        try:
            data_preparation = f"""    x_data = np.array({parameters['x_data']})
    y_data = np.array({parameters['y_data']})"""

            plot_code = f"""    plt.scatter(x_data, y_data, alpha={parameters.get('alpha', 0.7)}, label='{parameters.get('label', 'Data')}')
    if {parameters.get('label') is not None}:
        plt.legend()"""
            
            return self._generate_plot_code("", plot_code, data_preparation, parameters)
        except KeyError as e:
            return {"error": f"Missing required parameter for scatter plot: {e}"}

    def generate_histogram(self, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Generates Python code for a histogram."""
        try:
            data_preparation = f"""    data = np.array({parameters['data']})"""

            plot_code = f"""    plt.hist(data, bins={parameters.get('bins', 'auto')}, alpha={parameters.get('alpha', 0.7)}, color='{parameters.get('color', 'skyblue')}', edgecolor='{parameters.get('edgecolor', 'black')}')"""
            
            return self._generate_plot_code("", plot_code, data_preparation, parameters)
        except KeyError as e:
            return {"error": f"Missing required parameter for histogram: {e}"}

    def generate_heatmap(self, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Generates Python code for a heatmap using seaborn."""
        try:
            data_preparation = f"""    data = np.array({parameters['data']})"""
            
            imports = "import seaborn as sns"
            
            plot_code = f"""    sns.heatmap(data, annot={parameters.get('annot', True)}, cmap='{parameters.get('cmap', 'viridis')}', fmt='{parameters.get('fmt', '.2f')}')"""
            
            return self._generate_plot_code(imports, plot_code, data_preparation, parameters)
        except KeyError as e:
            return {"error": f"Missing required parameter for heatmap: {e}"} 