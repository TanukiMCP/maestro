# Copyright (c) 2025 TanukiMCP Orchestra
# Licensed under Non-Commercial License - Commercial use requires approval from TanukiMCP
# Contact tanukimcp@gmail.com for commercial licensing inquiries

"""
Defines the core Pydantic data models for the MAESTRO orchestration framework.

These schemas are used to structure the workflow that the LLM generates,
ensuring a consistent and predictable format for planning and execution.
"""

from pydantic import BaseModel, Field
from typing import List, Dict, Optional

class AgentProfile(BaseModel):
    """
    Defines the persona and instructions for an agent handling a specific task.
    This allows for a Mixture-of-Agents (MoA) approach where each task is
    handled by an LLM configured with a domain-specific mindset.
    """
    name: str = Field(
        description="A descriptive name for the agent profile, e.g., 'Code-Validator', 'API-Integrator', 'Creative-Writer'."
    )
    system_prompt: str = Field(
        description="The domain-specific system prompt that primes the LLM's behavior and thinking for this task."
    )

class Task(BaseModel):
    """
    Represents a single, discrete step in the orchestrated workflow.
    """
    task_id: int = Field(
        description="Sequential ID for the task, starting from 1."
    )
    description: str = Field(
        description="A clear, concise description of what this task aims to achieve and its role in the overall workflow."
    )
    agent_profile: AgentProfile = Field(
        description="The agent profile assigned to execute this task."
    )
    tools: List[str] = Field(
        description="A list of specific tools (e.g., 'maestro_search', 'maestro_execute') required to complete this task."
    )
    validation_criteria: str = Field(
        description="Specific, measurable, and objective criteria to validate that the task has been successfully completed."
    )
    user_collaboration_required: bool = Field(
        default=False, 
        description="Set to true if the workflow should pause for user input or confirmation before proceeding to the next task."
    )
    error_handling_plan: str = Field(
        description="A clear plan to follow if the task fails or its validation criteria cannot be met."
    )

class Workflow(BaseModel):
    """
    The complete, LLM-generated workflow plan. This is the primary object
    that the MAESTRO orchestrator produces in its planning phase.
    """
    workflow_id: str = Field(
        description="A unique identifier for this workflow instance, typically generated by the orchestration engine."
    )
    overall_goal: str = Field(
        description="The high-level user request or goal that this entire workflow is designed to accomplish."
    )
    tasks: List[Task] = Field(
        description="The ordered sequence of tasks to be executed to achieve the overall goal."
    )
    e2e_validation_criteria: str = Field(
        description="The final, comprehensive validation criteria to confirm that the overall goal has been successfully met after all tasks are complete."
    ) 